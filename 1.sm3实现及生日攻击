#include <iostream>
#include <string>
#include <cmath>
#include <ctime>
using namespace std;

//十六进制转十进制
int HexToDec(string str) {
	int dec = 0;
	for (int i = 0; i < str.size(); i++) {
		if (str[i] >= 'A' && str[i] <= 'F') {
			dec += (str[i] - 'A' + 10) * pow(16, str.size() - i - 1);
		}
		else {
			dec += (str[i] - '0') * pow(16, str.size() - i - 1);
		}
	}
	return dec;
}

//十进制转十六进制
string DecToHex(int str) {
	string hex = "";
	int temp = 0;
	while (str >= 1) {
		temp = str % 16;
		if (temp < 10 && temp >= 0) {
			hex = to_string(temp) + hex;
		}
		else {
			hex += ('A' + (temp - 10));
		}
		str = str / 16;
	}
	return hex;
}

//十六进制转二进制
string HexToBin(string str) {
	string bin = "";
	string table[16] = { "0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111" };
	for (int i = 0; i < str.size(); i++) {
		if (str[i] >= 'A' && str[i] <= 'F') {
			bin += table[str[i] - 'A' + 10];
		}
		else {
			bin += table[str[i] - '0'];
		}
	}
	return bin;
}

//二进制转十六进制
string BinToHex(string str) {
	string hex = "";
	int temp = 0;//每次四位二进制数的十进制值
	while (str.size() % 4 != 0) {//因为每四位二进制数就能够成为一个十六进制数，所以将二进制数长度转换为4的倍数
		str = "0" + str;//最高位添0直到长度为4的倍数即可
	}
	for (int i = 0; i < str.size(); i += 4) {
		temp = (str[i] - '0') * 8 + (str[i + 1] - '0') * 4 + (str[i + 2] - '0') * 2 + (str[i + 3] - '0') * 1;//4位二进制数的十进制大小为多少
		//当得到的值小于10时，可以直接用0-9来代替
		if (temp < 10) {
			hex += to_string(temp);
		}
		//当得到的值大于10时，进行A-F的转换
		else {
			hex += 'A' + (temp - 10);
		}
	}
	return hex;
}

//二进制转十进制
int BinToDec(string str) {
	int dec = 0;
	for (int i = 0; i < str.size(); i++) {
		dec += (str[i] - '0') * pow(2, str.size() - i - 1);
	}
	return dec;
}

//十进制转二进制
string DecToBin(int str) {
	string bin = "";
	while (str >= 1) {
		bin = to_string(str % 2) + bin;
		str = str / 2;
	}
	return bin;
}

//数据填充
string padding(string str) {
	string res = "";
	for (int i = 0; i < str.size(); i++) {
		//首先将输入值转换为16进制字符串
		res += DecToHex((int)str[i]);
	}
	/*
	for (int i = 0; i < res.size(); i++) {
		cout << res[i];
		if ((i + 1) % 8 == 0) {
			cout << "  ";
		}
		if ((i + 1) % 64 == 0 || (i + 1) == res.size()) {
			cout << endl;
		}
	}
	*/
	//2进制下的长度
	int res_length = res.size() * 4;
	//在获得的数据后面添1，在16进制下相当于是添加8
	res += "8";
	while (res.size() % 128 != 112) {
		//“0”比特填充
		res += "0";
	}
	string res_len = DecToHex(res_length);
	while (res_len.size() != 16) {
		res_len = "0" + res_len;
	}
	res += res_len;
	return res;
}

//循环左移
string LeftShift(string str, int len) {
	string res = HexToBin(str);
	res = res.substr(len) + res.substr(0, len);
	return BinToHex(res);
}

//异或
string XOR(string str1, string str2) {
	string res1 = HexToBin(str1);
	string res2 = HexToBin(str2);
	string res = "";
	for (int i = 0; i < res1.size(); i++) {
		if (res1[i] == res2[i]) {
			res += "0";
		}
		else {
			res += "1";
		}
	}
	return BinToHex(res);
}

//与
string AND(string str1, string str2) {
	string res1 = HexToBin(str1);
	string res2 = HexToBin(str2);
	string res = "";
	for (int i = 0; i < res1.size(); i++) {
		if (res1[i] == '1' && res2[i] == '1') {
			res += "1";
		}
		else {
			res += "0";
		}
	}
	return BinToHex(res);
}

//或
string OR(string str1, string str2) {
	string res1 = HexToBin(str1);
	string res2 = HexToBin(str2);
	string res = "";
	for (int i = 0; i < res1.size(); i++) {
		if (res1[i] == '0' && res2[i] == '0') {
			res += "0";
		}
		else {
			res += "1";
		}
	}
	return BinToHex(res);
}

//非
string NOT(string str) {
	string res1 = HexToBin(str);
	string res = "";
	for (int i = 0; i < res1.size(); i++) {
		if (res1[i] == '0') {
			res += "1";
		}
		else {
			res += "0";
		}
	}
	return BinToHex(res);
}

//逐比特异或
char binXor(char str1, char str2) {
	return str1 == str2 ? '0' : '1';
}

//逐比特与
char binAnd(char str1, char str2) {
	return (str1 == '1' && str2 == '1') ? '1' : '0';
}

//mod 2^32
string ModAdd(string str1, string str2) {
	string res1 = HexToBin(str1);
	string res2 = HexToBin(str2);
	char temp = '0';
	string res = "";
	for (int i = res1.size() - 1; i >= 0; i--) {
		res = binXor(binXor(res1[i], res2[i]), temp) + res;
		if (binAnd(res1[i], res2[i]) == '1') {
			temp = '1';
		}
		else {
			if (binXor(res1[i], res2[i]) == '1') {
				temp = binAnd('1', temp);
			}
			else {
				temp = '0';
			}
		}
	}
	return BinToHex(res);
}

//置换P1（X）
string P1(string str) {
	return XOR(XOR(str, LeftShift(str, 15)), LeftShift(str, 23));
}

//置换P0（X）
string P0(string str) {
	return XOR(XOR(str, LeftShift(str, 9)), LeftShift(str, 17));
}

//返回Tj常量值
string T(int j) {
	if (0 <= j && j <= 15) {
		return "79CC4519";
	}
	else {
		return "7A879D8A";
	}
}

//布尔函数FF
string FF(string str1, string str2, string str3, int j) {
	if (0 <= j && j <= 15) {
		return XOR(XOR(str1, str2), str3);
	}
	else {
		return OR(OR(AND(str1, str2), AND(str1, str3)), AND(str2, str3));
	}
}

//布尔函数GG
string GG(string str1, string str2, string str3, int j) {
	if (0 <= j && j <= 15) {
		return XOR(XOR(str1, str2), str3);
	}
	else {
		return OR(AND(str1, str2), AND(NOT(str1), str3));
	}
}

//消息扩展
string extension(string str) {
	string res = str;//字符串类型存储前68位存储扩展字W值
	for (int i = 16; i < 68; i++) {//根据公式生成第17位到第68位的W值
		res += XOR(XOR(P1(XOR(XOR(res.substr((i - 16) * 8, 8), res.substr((i - 9) * 8, 8)), LeftShift(res.substr((i - 3) * 8, 8), 15))), LeftShift(res.substr((i - 13) * 8, 8), 7)), res.substr((i - 6) * 8, 8));
	}
	/*
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			cout << res.substr(i * 64 + j * 8, 8) << "  ";
		}
		cout << endl;
	}
	cout << res.substr(512, 8) << "  " << res.substr(520, 8) << "  " << res.substr(528, 8) << "  " << res.substr(536, 8) << endl;
	*/
	for (int i = 0; i < 64; i++) {//根据公式生成64位W'值
		res += XOR(res.substr(i * 8, 8), res.substr((i + 4) * 8, 8));
	}
	/*
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			cout << res.substr(544 + i * 64 + j * 8, 8) << "  ";
		}
	}
	*/
	return res;
}

//消息压缩
string compress(string str1, string str2) {
	string IV = str2;
	string A = IV.substr(0, 8), B = IV.substr(8, 8), C = IV.substr(16, 8), D = IV.substr(24, 8), E = IV.substr(32, 8), F = IV.substr(40, 8), G = IV.substr(48, 8), H = IV.substr(56, 8);
	string SS1 = "", SS2 = "", TT1 = "", TT2 = "";
	/*
	cout << A <<  B <<  C <<  D <<  E <<  F <<  G <<  H << endl;*/
	for (int j = 0; j < 64; j++) {
		SS1 = LeftShift(ModAdd(ModAdd(LeftShift(A, 12), E), LeftShift(T(j), (j % 32))), 7);
		SS2 = XOR(SS1, LeftShift(A, 12));
		TT1 = ModAdd(ModAdd(ModAdd(FF(A, B, C, j), D), SS2), str1.substr((j + 68) * 8, 8));
		TT2 = ModAdd(ModAdd(ModAdd(GG(E, F, G, j), H), SS1), str1.substr(j * 8, 8));
		D = C;
		C = LeftShift(B, 9);
		B = A;
		A = TT1;
		H = G;
		G = LeftShift(F, 19);
		F = E;
		E = P0(TT2);
		//cout << A <<  B <<  C <<  D <<  E << F <<  G << H << endl;
	}
	string res = (A + B + C + D + E + F + G + H);
	return res;
}

//迭代压缩
string iteration(string str) {
	int num = str.size() / 128;
	string V = "7380166F4914B2B9172442D7DA8A0600A96F30BC163138AAE38DEE4DB0FB0E4E";
	string B = "", extensionB = "", compressB = "";
	for (int i = 0; i < num; i++) {
		B = str.substr(i * 128, 128);
		extensionB = extension(B);
		compressB = compress(extensionB, V);
		V = XOR(V, compressB);
	}
	return V;
}

#define N 20
//最多20位数
typedef struct sixteen
{
	char bit[N];//对应的十六进制符号
	double value; //对应的十进制值
	int bitcou;//位数
}SIX;


int main() {
	string str = "123456789abc";
	string paddingValue = padding(str);
	/*for (int i = 0; i < paddingValue.size() / 64; i++) 
	{
		for (int j = 0; j < 8; j++) 
		{
			cout << paddingValue.substr(i * 64 + j * 8, 8) << "  ";
		}
	}*/
	string result = iteration(paddingValue);
	cout << "杂凑值：" << result << endl;
	string compa = result.substr(0, 4);
	cout << "比较值：" << compa << endl;

	int count=0;
	while (1)
	{
		count++;
		//随机生成输入
		char num[16] =
		{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
		int bitcou = 0, i = 0, temp;
		SIX number;
		for (int i = 0; i < 50; i++)
		{
			number.bit[i] = 0;
		}
		//srand((unsigned)time(NULL));
		//这里我原本想用时间种子生成随机数，但是因为运行速度太快，每秒会运行三四次，这一秒内会生成相同的随机数，所以不能用时间种子
		number.bitcou = rand() % N;
		temp = rand() % 15 + 1;//产生首位,首位不为0
		number.bit[0] = num[temp];
		number.value = temp;
		//putchar(number.bit[0]);
		for (i = 1; i < number.bitcou; i++)//产生其它位
		{
			temp = rand() % 16;
			number.bit[i] = num[temp];
			number.value = number.value * 16 + temp;
			//cout << "putchar:" << "     ";
			//putchar(number.bit[i]);
		}
		//cout << "随机值：" << number.bit << endl;

		string paddingValue2 = padding(number.bit);
		//
		/*for (int i = 0; i < paddingValue2.size() / 64; i++) {
			for (int j = 0; j < 8; j++) {
				cout << paddingValue2.substr(i * 64 + j * 8, 8) << "  ";
			}
		}*/
		string result2 = iteration(paddingValue2);
		cout << "杂凑值：" << result2 << endl;
		string fin = result2.substr(0, 4);
		//cout << "fin：" << fin << endl;
		int jieguo;
		jieguo = compa.compare(fin);
		if (jieguo == 0)
		{
			cout << "次数为：" << count << endl;
			cout << "随机值为：" << number.bit << endl;
			break;
		}
	}
	system("pause");
	return 0;
}

